package info.mmpa.concoction.scan.dynamic;

import info.mmpa.concoction.model.ApplicationModel;
import info.mmpa.concoction.model.ModelSource;
import info.mmpa.concoction.output.Results;
import info.mmpa.concoction.output.ResultsSink;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.annotation.Nonnull;
import java.util.List;

/**
 * Advanced behavioral pattern matching based scanning.
 */
public class DynamicScan {
	private static final Logger logger = LoggerFactory.getLogger(DynamicScan.class);
	private final EntryPointDiscovery entryPointDiscovery;
	private final CoverageEntryPointSupplier coverageEntryPointSupplier;

	/**
	 * @param entryPointDiscovery
	 * 		Supplier of initial entry points for known cases.
	 * @param coverageEntryPointSupplier
	 * 		Supplier to fill in additional entry points to maximize scanned code coverage.
	 */
	public DynamicScan(@Nonnull EntryPointDiscovery entryPointDiscovery,
					   @Nonnull CoverageEntryPointSupplier coverageEntryPointSupplier) {
		this.entryPointDiscovery = entryPointDiscovery;
		this.coverageEntryPointSupplier = coverageEntryPointSupplier;

		// TODO: Supply dynamic models to match against
		//  - Pass them to the 'SsvmContext' and tweak VM initialization to track information that is needed
		//    for the models to match against.
		//    - Method enter/exit listeners
		//    - Method instruction interceptors for some edge cases perhaps?
	}

	/**
	 * @param model
	 * 		Model to scan.
	 *
	 * @return Detection results found in the model's primary source.
	 */
	@Nonnull
	public Results accept(@Nonnull ApplicationModel model) throws DynamicScanException {
		ResultsSink sink = new ResultsSink();
		SsvmContext context = new SsvmContext(model);

		// Visit initial entry points
		List<EntryPoint> initialEntryPoints = entryPointDiscovery.createEntryPoints(model, context);
		for (EntryPoint entryPoint : initialEntryPoints) {
			try {
				entryPoint.invoke(context);
			} catch (ClassNotFoundException ex) {
				logger.error("The entry point class '{}' was not found in the application model", entryPoint.getClassName(), ex);
				throw new DynamicScanException(ex);
			}
		}

		// Continually visit remaining entry points (generated by the supplier) until no more are given.
		// The supplier should be defined such that new entry points are provided until enough of the application
		// logic has been visited.
		CoverageEntryPointSupplier supplier = coverageEntryPointSupplier;
		EntryPoint lastEntryPoint = null;
		EntryPoint entryPoint;
		while ((entryPoint = supplier.nextEntryPoint(model, context)) != null) {
			if (entryPoint.equals(lastEntryPoint)) {
				logger.warn("Coverage entry point supplier gave same entry point twice in a row, aborting coverage scanning");
				break;
			}
			try {
				entryPoint.invoke(context);
			} catch (ClassNotFoundException ex) {
				logger.error("The entry point class '{}' was not found in the application model", entryPoint.getClassName(), ex);
				throw new DynamicScanException(ex);
			}
			lastEntryPoint = entryPoint;
		}

		// Build results from what we found
		return sink.buildResults();
	}
}
